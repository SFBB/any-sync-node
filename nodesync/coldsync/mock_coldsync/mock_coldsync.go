// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-node/nodesync/coldsync (interfaces: ColdSync)
//
// Generated by this command:
//
//	mockgen -destination mock_coldsync/mock_coldsync.go github.com/anyproto/any-sync-node/nodesync/coldsync ColdSync
//

// Package mock_coldsync is a generated GoMock package.
package mock_coldsync

import (
	context "context"
	reflect "reflect"

	nodesyncproto "github.com/anyproto/any-sync-node/nodesync/nodesyncproto"
	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockColdSync is a mock of ColdSync interface.
type MockColdSync struct {
	ctrl     *gomock.Controller
	recorder *MockColdSyncMockRecorder
	isgomock struct{}
}

// MockColdSyncMockRecorder is the mock recorder for MockColdSync.
type MockColdSyncMockRecorder struct {
	mock *MockColdSync
}

// NewMockColdSync creates a new mock instance.
func NewMockColdSync(ctrl *gomock.Controller) *MockColdSync {
	mock := &MockColdSync{ctrl: ctrl}
	mock.recorder = &MockColdSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColdSync) EXPECT() *MockColdSyncMockRecorder {
	return m.recorder
}

// ColdSyncHandle mocks base method.
func (m *MockColdSync) ColdSyncHandle(req *nodesyncproto.ColdSyncRequest, stream nodesyncproto.DRPCNodeSync_ColdSyncStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColdSyncHandle", req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// ColdSyncHandle indicates an expected call of ColdSyncHandle.
func (mr *MockColdSyncMockRecorder) ColdSyncHandle(req, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColdSyncHandle", reflect.TypeOf((*MockColdSync)(nil).ColdSyncHandle), req, stream)
}

// Init mocks base method.
func (m *MockColdSync) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockColdSyncMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockColdSync)(nil).Init), a)
}

// Name mocks base method.
func (m *MockColdSync) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockColdSyncMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockColdSync)(nil).Name))
}

// Sync mocks base method.
func (m *MockColdSync) Sync(ctx context.Context, spaceId, peerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, spaceId, peerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockColdSyncMockRecorder) Sync(ctx, spaceId, peerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockColdSync)(nil).Sync), ctx, spaceId, peerId)
}
