// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-node/nodesync/hotsync (interfaces: HotSync)
//
// Generated by this command:
//
//	mockgen -destination mock_hotsync/mock_hotsync.go github.com/anyproto/any-sync-node/nodesync/hotsync HotSync
//

// Package mock_hotsync is a generated GoMock package.
package mock_hotsync

import (
	context "context"
	reflect "reflect"
	atomic "sync/atomic"

	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockHotSync is a mock of HotSync interface.
type MockHotSync struct {
	ctrl     *gomock.Controller
	recorder *MockHotSyncMockRecorder
	isgomock struct{}
}

// MockHotSyncMockRecorder is the mock recorder for MockHotSync.
type MockHotSyncMockRecorder struct {
	mock *MockHotSync
}

// NewMockHotSync creates a new mock instance.
func NewMockHotSync(ctrl *gomock.Controller) *MockHotSync {
	mock := &MockHotSync{ctrl: ctrl}
	mock.recorder = &MockHotSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotSync) EXPECT() *MockHotSyncMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHotSync) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockHotSyncMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHotSync)(nil).Close), ctx)
}

// Init mocks base method.
func (m *MockHotSync) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockHotSyncMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockHotSync)(nil).Init), a)
}

// Name mocks base method.
func (m *MockHotSync) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockHotSyncMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockHotSync)(nil).Name))
}

// Run mocks base method.
func (m *MockHotSync) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockHotSyncMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHotSync)(nil).Run), ctx)
}

// SetMetric mocks base method.
func (m *MockHotSync) SetMetric(hit, miss *atomic.Uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetric", hit, miss)
}

// SetMetric indicates an expected call of SetMetric.
func (mr *MockHotSyncMockRecorder) SetMetric(hit, miss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetric", reflect.TypeOf((*MockHotSync)(nil).SetMetric), hit, miss)
}

// UpdateQueue mocks base method.
func (m *MockHotSync) UpdateQueue(changedIds []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateQueue", changedIds)
}

// UpdateQueue indicates an expected call of UpdateQueue.
func (mr *MockHotSyncMockRecorder) UpdateQueue(changedIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueue", reflect.TypeOf((*MockHotSync)(nil).UpdateQueue), changedIds)
}
