// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-node/archive/archivestore (interfaces: ArchiveStore)
//
// Generated by this command:
//
//	mockgen -destination mock_archivestore/mock_archivestore.go github.com/anyproto/any-sync-node/archive/archivestore ArchiveStore
//

// Package mock_archivestore is a generated GoMock package.
package mock_archivestore

import (
	context "context"
	io "io"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockArchiveStore is a mock of ArchiveStore interface.
type MockArchiveStore struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveStoreMockRecorder
	isgomock struct{}
}

// MockArchiveStoreMockRecorder is the mock recorder for MockArchiveStore.
type MockArchiveStoreMockRecorder struct {
	mock *MockArchiveStore
}

// NewMockArchiveStore creates a new mock instance.
func NewMockArchiveStore(ctrl *gomock.Controller) *MockArchiveStore {
	mock := &MockArchiveStore{ctrl: ctrl}
	mock.recorder = &MockArchiveStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveStore) EXPECT() *MockArchiveStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockArchiveStore) Delete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArchiveStoreMockRecorder) Delete(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArchiveStore)(nil).Delete), ctx, name)
}

// Get mocks base method.
func (m *MockArchiveStore) Get(ctx context.Context, name string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArchiveStoreMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArchiveStore)(nil).Get), ctx, name)
}

// Init mocks base method.
func (m *MockArchiveStore) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockArchiveStoreMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockArchiveStore)(nil).Init), a)
}

// Name mocks base method.
func (m *MockArchiveStore) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockArchiveStoreMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockArchiveStore)(nil).Name))
}

// Put mocks base method.
func (m *MockArchiveStore) Put(ctx context.Context, name string, data io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockArchiveStoreMockRecorder) Put(ctx, name, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockArchiveStore)(nil).Put), ctx, name, data)
}
